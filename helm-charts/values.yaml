# Default values for helm-charts.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
trigger:
  ## @param trigger.name
  name: trigger
  ## @param trigger.podAnnotations trigger pod annotations
  ##
  podAnnotations: {}
  ## @param trigger.deploymentAnnotations trigger deployment annotations
  ##
  deploymentAnnotations: {}
  ## @param trigger.replicaCount trigger replica count
  ##
  replicaCount: 2
  ## trigger image parameters
  ##
  image:
    ## @param trigger.image.repository trigger image repository
    ##
    repository: ghcr.io/triggerdotdev/trigger.dev
    ## @param trigger.image.tag trigger image tag
    ##
    tag: "latest"
    ## @param trigger.image.pullPolicy trigger image pullPolicy
    ##
    pullPolicy: Always
  ## @param trigger.resources.limits.memory container memory limit [check the offical kubernetes documentations](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  ## @param trigger.resources.requests.cpu container CPU request [check the offical kubernetes documentations](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  ##
  resources:
    limits:
      memory: 200Mi
    requests:
      cpu: 150m
  ## @param trigger.affinity Backend pod affinity
  ##
  affinity: {}
  ## @param trigger.kubeSecretRef trigger secret resource reference name
  ##
  kubeSecretRef: ""
  ## trigger service
  ##
  service:
    ## @param trigger.service.annotations trigger service annotations
    ##
    annotations: {}
    ## @param trigger.service.type trigger service type
    ##
    type: ClusterIP
    ## @param trigger.service.nodePort trigger service nodePort (used if above type is `NodePort`)
    ##
    nodePort: ""

## trigger environment variables configuration
envVars:
  ENCRYPTION_KEY: ""
  MAGIC_LINK_SECRET: ""
  SESSION_SECRET: ""
  LOGIN_ORIGIN: ""
  APP_ORIGIN: ""
  DIRECT_URL: ""
  FROM_EMAIL: ""
  REPLY_TO_EMAIL: ""
  RESEND_API_KEY: ""
  AUTH_GITHUB_CLIENT_ID: ""
  AUTH_GITHUB_CLIENT_SECRET: ""

## @section Postgresql(&reg;) parameters
## Documentation : https://github.com/bitnami/charts/tree/main/bitnami/postgresql-ha
##

# global:
#   postgresql:
#     postgresqlDatabase: "trigger"
#     postgresqlPassword: "password"
#     postgresqlUsername: "postgres"
#     servicePort: "5432"

postgresql:
  global:
    postgresql:
      ## @param global.postgresql.auth.postgresPassword Password for the "postgres" admin user (overrides `auth.postgresPassword`)
      ## @param global.postgresql.auth.username Name for a custom user to create (overrides `auth.username`)
      ## @param global.postgresql.auth.password Password for the custom user to create (overrides `auth.password`)
      ## @param global.postgresql.auth.database Name for a custom database to create (overrides `auth.database`)
      ## @param global.postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials (overrides `auth.existingSecret`).
      ## @param global.postgresql.auth.secretKeys.adminPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.adminPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
      ## @param global.postgresql.auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.userPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
      ## @param global.postgresql.auth.secretKeys.replicationPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.replicationPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
      ##
      auth:
        postgresPassword: "password"
        username: "postgres"
        password: "password"
        database: "trigger"
      ## @param global.postgresql.service.ports.postgresql PostgreSQL service port (overrides `service.ports.postgresql`)
      ##
      service:
        ports:
          postgresql: "5432"

  ## @section Common parameters
  ##
  nameOverride: "postgresql"
  ## @param fullnameOverride String to fully override common.names.fullname template
  ##
  fullnameOverride: "postgresql"

  ## @section PostgreSQL common parameters
  ##

  ## Bitnami PostgreSQL image version
  ## ref: https://hub.docker.com/r/bitnami/postgresql/tags/
  ## @param image.registry PostgreSQL image registry
  ## @param image.repository PostgreSQL image repository
  ## @param image.tag PostgreSQL image tag (immutable tags are recommended)
  ## @param image.digest PostgreSQL image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param image.pullPolicy PostgreSQL image pull policy
  ## @param image.pullSecrets Specify image pull secrets
  ## @param image.debug Specify if debug values should be set
  ##
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 16.0.0-debian-11-r13

  architecture: standalone
  ## Replication configuration
  ## Ignored if `architecture` is `standalone`
  ##
  ## @param containerPorts.postgresql PostgreSQL container port
  ##
  containerPorts:
    postgresql: 5432

  postgresqlDataDir: /bitnami/postgresql/data
  ## @param postgresqlSharedPreloadLibraries Shared preload libraries (comma-separated list)
  ##
  postgresqlSharedPreloadLibraries: "pgaudit"
  ## Start PostgreSQL pod(s) without limitations on shm memory.
  ## By default docker and containerd (and possibly other container runtimes) limit `/dev/shm` to `64M`
  ## ref: https://github.com/docker-library/postgres/issues/416
  ## ref: https://github.com/containerd/containerd/issues/3654
  ##
  shmVolume:
    ## @param shmVolume.enabled Enable emptyDir volume for /dev/shm for PostgreSQL pod(s)
    ##
    enabled: true
    ## @param shmVolume.sizeLimit Set this to enable a size limit on the shm tmpfs
    ## Note: the size of the tmpfs counts against container's memory limit
    ## e.g:
    ## sizeLimit: 1Gi
    ##
    sizeLimit: ""
  ## TLS configuration
  ##
  tls:
    ## @param tls.enabled Enable TLS traffic support
    ##
    enabled: false
    ## @param tls.autoGenerated Generate automatically self-signed TLS certificates
    ##
    autoGenerated: false
    ## @param tls.preferServerCiphers Whether to use the server's TLS cipher preferences rather than the client's
    ##
    preferServerCiphers: true
    ## @param tls.certificatesSecret Name of an existing secret that contains the certificates
    ##
    certificatesSecret: ""
    ## @param tls.certFilename Certificate filename
    ##
    certFilename: ""
    ## @param tls.certKeyFilename Certificate key filename
    ##
    certKeyFilename: ""
    ## @param tls.certCAFilename CA Certificate filename
    ## If provided, PostgreSQL will authenticate TLS/SSL clients by requesting them a certificate
    ## ref: https://www.postgresql.org/docs/9.6/auth-methods.html
    ##
    certCAFilename: ""
    ## @param tls.crlFilename File containing a Certificate Revocation List
    ##
    crlFilename: ""

  ## @section PostgreSQL Primary parameters
  ##
  primary:
    ## Configure extra options for PostgreSQL Primary containers' liveness, readiness and startup probes
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
    ## @param primary.livenessProbe.enabled Enable livenessProbe on PostgreSQL Primary containers
    ## @param primary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param primary.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param primary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param primary.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param primary.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 6
      successThreshold: 1
    ## @param primary.readinessProbe.enabled Enable readinessProbe on PostgreSQL Primary containers
    ## @param primary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param primary.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param primary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param primary.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param primary.readinessProbe.successThreshold Success threshold for readinessProbe
    ##
    readinessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 6
      successThreshold: 1
    ## @param primary.startupProbe.enabled Enable startupProbe on PostgreSQL Primary containers
    ## @param primary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
    ## @param primary.startupProbe.periodSeconds Period seconds for startupProbe
    ## @param primary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
    ## @param primary.startupProbe.failureThreshold Failure threshold for startupProbe
    ## @param primary.startupProbe.successThreshold Success threshold for startupProbe
    ##
    startupProbe:
      enabled: false
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 15
      successThreshold: 1
    persistence:
      ## @param primary.persistence.enabled Enable PostgreSQL Primary data persistence using PVC
      ##
      enabled: true
      ## @param primary.persistence.existingClaim Name of an existing PVC to use
      ##
      existingClaim: ""
      ## @param primary.persistence.accessModes PVC Access Mode for PostgreSQL volume
      ##
      accessModes:
        - ReadWriteOnce
      ## @param primary.persistence.size PVC Storage Request for PostgreSQL volume
      ##
      size: 8Gi
